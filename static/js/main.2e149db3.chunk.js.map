{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["LoadingMessage","Treino","lazy","withRouter","props","fallback","exact","path","render","Boolean","window","location","hostname","match","String","prototype","replaceAll","search","replacement","this","split","join","navigator","serviceWorker","ready","then","registration","unregister","history","createBrowserHistory","ReactDOM","document","getElementById"],"mappings":"qSAUMA,EAAiB,iBACrB,IAGIC,EAAUC,gBAAK,kBAAO,uDAgBbC,mBAdf,SAAaC,GAEX,OACE,8BACE,cAAC,WAAD,CAAUC,SAAU,cAACL,EAAD,IAApB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAACP,EAAD,gB,OCZ1BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,OAAOC,UAAUC,WAAa,SAAUC,EAAQC,GAE9C,OADaC,KACCC,MAAMH,GAAQI,KAAKH,IDiG7B,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBC9FnB,IAAMC,EAAUC,MAEV7B,EAAiB,iBACrB,IAGF8B,IAAStB,OACN,cAAC,WAAD,CAAUH,SAAU,cAAC,EAAD,IAApB,SACC,cAAC,IAAD,CAAQuB,QAASA,EAAjB,SACE,cAAC,EAAD,QAIJG,SAASC,eAAe,W","file":"static/js/main.2e149db3.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\nimport 'primereact/resources/themes/nova/theme.css';\nimport React, { lazy, Suspense } from 'react';\nimport { withRouter } from 'react-router';\nimport { Route, Switch } from \"react-router-dom\";\nimport './layout/layout.css';\n\n\n\nconst LoadingMessage = () => (\n  \"\"\n);\n\nconst Treino = (lazy(() => (import('./components/Treino'))));\n\nfunction App(props) {\n\n  return (\n    <div>\n      <Suspense fallback={<LoadingMessage />}>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Treino />} />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n\n}\n\nexport default withRouter(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import createBrowserHistory from 'history/createBrowserHistory';\nimport React, { Suspense } from 'react';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport { unregister } from './registerServiceWorker';\n\n\n\nString.prototype.replaceAll = function (search, replacement) {\n  var target = this;\n  return target.split(search).join(replacement);\n};\n\nunregister();\n\nconst history = createBrowserHistory();\n\nconst LoadingMessage = () => (\n  \"\"\n);\n\nReactDOM.render(\n  (<Suspense fallback={<LoadingMessage />}>\n    <Router history={history}>\n      <App></App>\n    </Router>\n  </Suspense>\n  ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}